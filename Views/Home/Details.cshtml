@* 3. strongly typed view  *@
@* bring in model type *@
@* @model EmployeeManagement.Models.Employee *@

@* 4. ViewModel appraoch *@
@model HomeDetailsViewModel


    @{
        // 1. ViewData approach
        // accessing the data that is not string type
        // we have explictly cast it to the expected type
        // var employee = ViewData["Employee"] as EmployeeManagement.Models.Employee;

        // 2. ViewBag approach
        // with ViewBag, we do not have to do casting
        // var employee = ViewBag.employee;

        // 3. strongly typed view
        // var employee = Model;

        // 4. use view model
        var viewModel = Model;
    }

@* inject content of this page to layout view *@
@{
    @* We will use _StartView to replace this line for eaiser maintaince *@
    @* Layout = "~/Views/Shared/_Layout.cshtml";  *@
    ViewBag.Title = "Employee Detail";
    var photoPath = "~/Images/" + viewModel.Employee.PhotoPath ?? "noimage.jpg";
}
    
@* <h1>@ViewData["PageTitle"]</h1> *@
@* <h1>@viewModel.PageTitle</h1> *@

<div class="row justify-content-center m-3">
    <div class="col-sm-8">
        <div class="card">
            <div class="card-header">
                <h1>@viewModel.Employee.Name</h1>
            </div>

            <div class="card-body text-center">
                <img class="card-img-top" src="@photoPath" asp-append-version="true" />

                <h4>Employee ID : @viewModel.Employee.Id</h4>
                <h4>Email : @viewModel.Employee.Email</h4>
                <h4>Department : @viewModel.Employee.Department</h4>

            </div>
            <div class="card-footer text-center">
                <a asp-controller="home" asp-action="index" class="btn btn-primary">Back</a>
                <a asp-controller="home" asp-action="details" asp-route-id="@viewModel.Employee.Id" class="btn btn-primary" class="btn btn-primary">Edit</a>
                <a href="#" class="btn btn-danger">Delete</a>
            </div>
        </div>
    </div>
</div>

@* add js file *@
@* wrap with @section so that when inject to layout view
we can have logic to to render this script section only when load this view *@
@section Scripts {
    <script src="~/js/CustomScript.js"></script>
}