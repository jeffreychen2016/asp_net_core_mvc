@* 3. strongly typed view  *@
@* bring in model type *@
@* @model EmployeeManagement.Models.Employee *@

@* 4. ViewModel appraoch *@
@model EmployeeManagement.ViewModels.HomeDetailsViewModel


    @{
        // 1. ViewData approach
        // accessing the data that is not string type
        // we have explictly cast it to the expected type
        // var employee = ViewData["Employee"] as EmployeeManagement.Models.Employee;

        // 2. ViewBag approach
        // with ViewBag, we do not have to do casting
        // var employee = ViewBag.employee;

        // 3. strongly typed view
        // var employee = Model;

        // 4. use view model
        var viewModel = Model;
    }

@* inject content of this page to layout view *@
@{
    @* We will use _StartView to replace this line for eaiser maintaince *@
    @* Layout = "~/Views/Shared/_Layout.cshtml";  *@
    ViewBag.Title = "Employee Detail";
}
    
@* <h1>@ViewData["PageTitle"]</h1> *@
<h1>@viewModel.PageTitle</h1>
<div>
    Name: @viewModel.Employee.Name
</div>
<div>
    Email: @viewModel.Employee.Email
</div>

@* add js file *@
@* wrap with @section so that when inject to layout view
we can have logic to to render this script section only when load this view *@
@section Scripts {
    <script src="~/js/CustomScript.js"></script>
}